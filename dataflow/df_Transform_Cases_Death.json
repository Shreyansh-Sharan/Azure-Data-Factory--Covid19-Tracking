{
	"name": "df_Transform_Cases_Death",
	"properties": {
		"folder": {
			"name": "Covid Reporting Source"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases_death_dataset",
						"type": "DatasetReference"
					},
					"name": "SourceDataSet"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "SourceCountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dataflow_sink_dataset",
						"type": "DatasetReference"
					},
					"name": "SinkForCasesandDeaths",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_devopsasset_dev",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "FilterEuropeOnly"
				},
				{
					"name": "SelectRequiredFields"
				},
				{
					"name": "PivotAcrossIndicatorToGetSingleColumn"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as long,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as string,",
				"          rate_14_day as string,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDataSet",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
				"SourceDataSet filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterEuropeOnly",
				"FilterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported'+'_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectRequiredFields",
				"SelectRequiredFields pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     Count = sum(daily_count),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> PivotAcrossIndicatorToGetSingleColumn",
				"PivotAcrossIndicatorToGetSingleColumn, SourceCountryLookup lookup(PivotAcrossIndicatorToGetSingleColumn@country == SourceCountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"LookupCountry select(mapColumn(",
				"          country = PivotAcrossIndicatorToGetSingleColumn@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = PivotAcrossIndicatorToGetSingleColumn@population,",
				"          cases_count = {confirmed casesCount},",
				"          deaths_count = deathsCount,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForSink",
				"SelectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkForCasesandDeaths"
			]
		}
	}
}